apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    environment: dev
    producer: lunchbadger
  name: gateway-lunchbadger-dev
data:
  system.config.yml: |-
    db:
      redis:
        emulate: true
        host: localhost
        port: 6379
        namespace: EG

    cli:
      url: http://localhost:9876

    crypto:
      cipherKey: sensitiveKey
      algorithm: aes256
      saltRounds: 10
    session:
      secret: keyboard cat
      resave: false
      saveUninitialized: false
    accessTokens:
      timeToExpiry: 7200000
    refreshTokens:
      timeToExpiry: 7200000
    authorizationCodes:
      timeToExpiry: 300000

  gateway.config.yml: |-
    {{- if eq true .Values.production }}
    https:
      port: 443
      tls:
        '*.lunchbadger.io': &ioTLS
          key: '/etc/lunchbadger-tls/lunchbadger.io.key.pem'
          cert: '/etc/lunchbadger-tls/lunchbadger.io.cert.pem'
        'api.lunchbadger.com': &comTLS
          key: '/etc/lunchbadger-tls/lunchbadger.com.key.pem'
          cert: '/etc/lunchbadger-tls/lunchbadger.com.cert.pem'
        'kube-watcher.lunchbadger.com': *comTLS
        default: *ioTLS
    {{- else }}
    http:
      port: 80
    {{- end }}
    admin:
      port: 9876
      hostname: localhost
    apiEndpoints:
      lunchbadger-api:
        host: {{ quote .Values.hosts.api }}
        path: '*'
      kube-watcher-api:
        host: {{ quote .Values.hosts.kubeWatcher }}
        path: '*'
      internal-api:
        host: {{ quote .Values.hosts.internal }}
        path: '*'
      serverless-api:
        host: {{ quote .Values.hosts.serverless }}
        path: '*'
      gateway-admin-api:
        host: {{ quote .Values.hosts.gatewayAdmin }}
        path: '*'
      gateway-access:
        host: {{ quote .Values.hosts.gatewayAccess }}
        path: '*'
    serviceEndpoints:
      backend:
        url: {{ quote .Values.traefikAddress }}
    policies:
      - cors
      - jwt
      - proxy
      - terminate
    pipelines:
      producersAndUsers:
        apiEndpoints:
          - lunchbadger-api
        policies:
          - cors: &corsPolicy
            - action:
                origin:
                  - {{ quote .Values.origin }}
                credentials: true
          - jwt: &jwtPolicy
            {{- with .Values.jwt }}
            - action:
                issuer: {{ quote .issuer }}
                audience: {{ quote .audience }}
                checkCredentialExistence: false
                algorithms:
                  - RS256
                secretOrPublicKey: | {{ range .publicKey | split "\\n" }}
                  {{ . }}{{ end }}
            {{- end }}
          - proxy:
              - action:
                  serviceEndpoint: backend
                  changeOrigin: false
      monitoring:
        apiEndpoints:
          - kube-watcher-api
        policies:
          - cors: *corsPolicy
          - jwt: *jwtPolicy
          - terminate:
            - condition:
                name: expression
                expression: |
                  const urlParts = req.url.split('/');
                  req.user.sub !== urlParts[2];
              action:
                statusCode: 403
                message: Forbidden
          - proxy:
              - action:
                  serviceEndpoint: backend
                  changeOrigin: false
      internal:
        apiEndpoints:
          - internal-api
          - serverless-api
          - gateway-admin-api
        policies:
          - cors: *corsPolicy
          - jwt: *jwtPolicy
          - terminate:
            - condition:
                name: expression
                expression: |
                  const hostParts = req.host.split('-');
                  req.user.sub !== hostParts[0] &&
                         req.user.sub !== hostParts[1] &&
                         req.user.sub !== hostParts[2];
              action:
                statusCode: 403
                message: Forbidden
          - proxy:
              - action:
                  serviceEndpoint: backend
                  changeOrigin: false
      gateway:
        apiEndpoints:
          - gateway-access
        policies:
          - proxy:
              - action:
                  serviceEndpoint: backend
                  changeOrigin: false
